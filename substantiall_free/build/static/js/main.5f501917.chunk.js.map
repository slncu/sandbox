{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["month2day","month","year2day","year","int","str","parseInt","App","state","cost","day","result","height","width","calculate","_this$state","_this","totalDays","setState","this","window","innerWidth","innerHeight","_this2","_this$state2","react_default","a","createElement","className","type","defaultValue","onChange","e","target","value","onClick","concat","react_confetti_min_default","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAIMA,SAAY,SAAAC,GAAK,OAAY,GAARA,IACrBC,EAAW,SAAAC,GAAI,OAAW,IAAPA,GACnBC,EAAM,SAAAC,GAAG,OAAIC,SAASD,EAAK,KA6ElBE,6MA1EbC,MAAQ,CACNC,KAAM,EACNN,KAAM,EACNF,MAAO,EACPS,IAAK,EACLC,OAAQ,GACRC,OAAQ,GACRC,MAAO,MAUTC,UAAY,WAAM,IAAAC,EACmBC,EAAKR,MAAhCC,EADQM,EACRN,KAAMN,EADEY,EACFZ,KAAMF,EADJc,EACId,MAAOS,EADXK,EACWL,IACrBO,EAAYb,EAAIF,EAASC,IAASC,EAAIJ,EAAUC,IAAUG,EAAIM,GACpEM,EAAKE,SAAS,CACZP,OAAQF,EAAOQ,wFAVjBE,KAAKD,SAAS,CACZL,MAAOO,OAAOC,WACdT,OAAQQ,OAAOE,+CAYV,IAAAC,EAAAJ,KAAAK,EAC2BL,KAAKX,MAA/BG,EADDa,EACCb,OAAQE,EADTW,EACSX,MAAOD,EADhBY,EACgBZ,OAEvB,OACEa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,iFAEEH,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLC,aAAc,EACdC,SAAU,SAAAC,GAAC,OAAIT,EAAKL,SAAS,CAAET,KAAMuB,EAAEC,OAAOC,WALlD,4BASAT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLC,aAAc,EACdC,SAAU,SAAAC,GAAC,OAAIT,EAAKL,SAAS,CAAEf,KAAM6B,EAAEC,OAAOC,WAJlD,SAOET,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLC,aAAc,EACdC,SAAU,SAAAC,GAAC,OAAIT,EAAKL,SAAS,CAAEjB,MAAO+B,EAAEC,OAAOC,WAVnD,eAaET,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLC,aAAc,EACdC,SAAU,SAAAC,GAAC,OAAIT,EAAKL,SAAS,CAAER,IAAKsB,EAAEC,OAAOC,WAhBjD,wCAoBAT,EAAAC,EAAAC,cAAA,UAAQQ,QAAShB,KAAKL,WAAtB,kCACY,KAAXH,GAAiBc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACjCH,EAAAC,EAAAC,cAAA,OAAKC,UAAS,UAAAQ,OAAuB,KAAXzB,EAAgB,GAAK,WAA/C,wCACUA,EADV,2BACqBc,EAAAC,EAAAC,cAAA,mDAET,KAAXhB,GAAiBc,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CAAUb,MAAOA,EAAOD,OAAQA,cAnE5C0B,aCIEC,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5f501917.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Confetti from 'react-confetti'\nimport './App.css'\n\nconst month2day = month => month * 30\nconst year2day = year => year * 365\nconst int = str => parseInt(str, 10)\n\nclass App extends Component {\n  state = {\n    cost: 0,\n    year: 0,\n    month: 0,\n    day: 0,\n    result: '',\n    height: '',\n    width: '',\n  }\n\n  componentDidMount() {\n    this.setState({\n      width: window.innerWidth,\n      height: window.innerHeight,\n    })\n  }\n\n  calculate = () => {\n    const { cost, year, month, day } = this.state\n    const totalDays = int(year2day(year)) + int(month2day(month)) + int(day)\n    this.setState({\n      result: cost / totalDays,\n    })\n  }\n\n  render() {\n    const { result, width, height } = this.state\n\n    return (\n      <div className='App'>\n        <header className='App-header'>\n          <div className='content'>\n            <div className='content-header'>\n              あなたの買いたいものは、￥\n              <input\n                type='text'\n                defaultValue={0}\n                onChange={e => this.setState({ cost: e.target.value })}\n              />\n              なので、\n            </div>\n            <div className='content-body'>\n              <input\n                type='text'\n                defaultValue={0}\n                onChange={e => this.setState({ year: e.target.value })}\n              />\n              年\n              <input\n                type='text'\n                defaultValue={0}\n                onChange={e => this.setState({ month: e.target.value })}\n              />\n              ヶ月\n              <input\n                type='text'\n                defaultValue={0}\n                onChange={e => this.setState({ day: e.target.value })}\n              />\n              日使ったら、\n            </div>\n            <button onClick={this.calculate}>結果を表示</button>\n            {result !== '' && <div className='overlay' />}\n            <div className={`result ${result !== '' ? '' : 'hidden'}`}>\n              1日あたり、￥{result}なので、<h1>実質無料！！</h1>\n            </div>\n            {result !== '' && <Confetti width={width} height={height} />}\n          </div>\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}